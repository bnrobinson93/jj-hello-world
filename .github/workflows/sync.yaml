name: Create PR for Main Changes

on:
  push:
    branches:
      - main

jobs:
  create-sync-pr:
    runs-on: ubuntu-latest

    # Job-level permissions (most restrictive possible)
    permissions:
      contents: read
      pull-requests: write
      issues: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          persist-credentials: false # Don't persist credentials

      - name: Configure Git with scoped token (job-scoped only)
        run: |
          git config --local user.name "Brad R"
          git config --local user.email "31802085+bnrobinson93@users.noreply.github.com"
          # Scoped to this job only, will not persist
          git config --local url."https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/".insteadOf "https://github.com/"

      - name: Get commit info and check PR
        id: setup
        uses: actions/github-script@v7
        with:
          script: |
            // Sanitize and validate inputs to prevent injection
            const sanitizeInput = (input) => {
              if (typeof input !== 'string') return '';
              // Remove potentially dangerous characters, keep only safe ones
              return input.replace(/[`$\\]/g, '').substring(0, 500);
            };

            // Get commit info from context (trusted source)
            const commitMessage = sanitizeInput(context.payload.head_commit?.message || '');
            const commitAuthor = sanitizeInput(context.payload.head_commit?.author?.name || '');
            const commitSha = context.sha; // Already validated by GitHub
            const commitDate = context.payload.head_commit?.timestamp || '';

            // Validate required fields
            if (!commitMessage || !commitAuthor || !commitSha) {
              core.setFailed('Missing required commit information');
              return;
            }

            // Check for existing PR with exact branch names (no user input)
            const { data: prs } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              head: `${context.repo.owner}:feat/latest-changes-from-main`,
              base: 'feat/PEP-2386-dsp-v1-integration',
              state: 'open'
            });

            const existingPR = prs.length > 0 ? prs[0] : null;

            // Set sanitized outputs
            core.setOutput('commit-message', commitMessage);
            core.setOutput('commit-author', commitAuthor);
            core.setOutput('commit-sha', commitSha);
            core.setOutput('commit-date', commitDate);
            core.setOutput('pr-exists', existingPR ? 'true' : 'false');
            core.setOutput('pr-number', existingPR ? String(existingPR.number) : '');
            core.setOutput('pr-body', existingPR ? sanitizeInput(existingPR.body || '') : '');

            console.log(existingPR ? `Found existing PR #${existingPR.number}` : 'No existing PR found');

      - name: Create or update branch
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail  # Exit on error, undefined vars, pipe failures

          # Fixed branch names (no user input)
          FEATURE_BRANCH="feat/latest-changes-from-main"

          # Check if branch exists remotely (quoted to prevent splitting)
          if git ls-remote --heads origin "${FEATURE_BRANCH}" | grep -q "${FEATURE_BRANCH}"; then
            echo "Branch exists, updating..."
            git fetch origin "${FEATURE_BRANCH}"
            git checkout "${FEATURE_BRANCH}"
            git reset --hard origin/main
          else
            echo "Creating new branch..."
            git checkout -b "${FEATURE_BRANCH}"
          fi

          git push origin "${FEATURE_BRANCH}"

      - name: Create new PR
        if: steps.setup.outputs.pr-exists == 'false'
        uses: actions/github-script@v7
        with:
          script: |
            // All inputs are from previous step outputs (sanitized) or GitHub context (trusted)
            const commitMessage = `${{ steps.setup.outputs.commit-message }}`;
            const commitAuthor = `${{ steps.setup.outputs.commit-author }}`;
            const commitSha = `${{ steps.setup.outputs.commit-sha }}`;
            const commitDate = `${{ steps.setup.outputs.commit-date }}`;

            // Validate inputs again before use
            if (!commitMessage || !commitAuthor || !commitSha) {
              core.setFailed('Invalid commit information for PR creation');
              return;
            }

            // Template with escaped content
            const body = `## ðŸ”„ Latest Changes from Main

            This PR contains the latest changes from the \`main\` branch that need to be integrated into \`feat/PEP-2386-dsp-v1-integration\`.

            ### Recent Commits:

            **${new Date(commitDate).toLocaleString()}** - ${commitMessage}
            _by ${commitAuthor}_ (\`${commitSha.substring(0, 7)}\`)

            ---

            **Instructions:**
            1. Review the changes in this PR
            2. Test if needed
            3. Approve and merge when ready
            4. This PR will be automatically recreated for future main branch changes

            _Auto-created by @${context.actor}_
            `;

            try {
              const { data: pr } = await github.rest.pulls.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: 'ðŸ”„ Sync latest changes from main',
                head: 'feat/latest-changes-from-main', // Fixed string, no injection risk
                base: 'feat/PEP-2386-dsp-v1-integration', // Fixed string, no injection risk
                body: body
              });

              console.log(`Created PR #${pr.number}`);

            } catch (error) {
              core.setFailed(`Failed to create PR: ${error.message}`);
            }

      - name: Update existing PR
        if: steps.setup.outputs.pr-exists == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            // All inputs are sanitized from previous steps
            const commitMessage = `${{ steps.setup.outputs.commit-message }}`;
            const commitAuthor = `${{ steps.setup.outputs.commit-author }}`;
            const commitSha = `${{ steps.setup.outputs.commit-sha }}`;
            const commitDate = `${{ steps.setup.outputs.commit-date }}`;
            const prNumber = parseInt(`${{ steps.setup.outputs.pr-number }}`, 10);
            const existingBody = `${{ steps.setup.outputs.pr-body }}`;

            // Validate inputs
            if (!commitMessage || !commitAuthor || !commitSha || !prNumber) {
              core.setFailed('Invalid data for PR update');
              return;
            }

            const newCommitEntry = `**${new Date(commitDate).toLocaleString()}** - ${commitMessage}
            _by ${commitAuthor}_ (\`${commitSha.substring(0, 7)}\`)
            `;

            try {
              // Update PR body
              const lines = existingBody.split('\n');
              const commitsIndex = lines.findIndex(line => line.includes('### Recent Commits:'));

              if (commitsIndex !== -1) {
                lines.splice(commitsIndex + 2, 0, newCommitEntry);
                const updatedBody = lines.join('\n');

                await github.rest.pulls.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: prNumber,
                  body: updatedBody
                });

                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: prNumber,
                  body: `ðŸ”„ **New commit added from main by @${context.actor}:**\n\n${newCommitEntry}`
                });

                console.log(`Updated PR #${prNumber}`);
              }

            } catch (error) {
              core.setFailed(`Failed to update PR: ${error.message}`);
            }

      - name: Cleanup credentials
        if: always()
        run: |
          # Remove git configuration to ensure credentials don't persist
          git config --local --unset url."https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/".insteadOf || true
          git config --local --unset user.name || true
          git config --local --unset user.email || true
