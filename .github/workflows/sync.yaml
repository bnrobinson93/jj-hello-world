iname: Create PR for Main Changes

on:
  push:
    branches:
      - main

jobs:
  create-sync-pr:
    runs-on: ubuntu-latest

    permissions:
      contents: write
      pull-requests: write
      issues: write

    steps:
      - name: Get commit info, check PR, and manage branch
        id: setup
        uses: actions/github-script@v7
        with:
          script: |
            const sanitizeInput = (input) => {
              if (typeof input !== 'string') return '';
              return input.replace(/[`$\\]/g, '').substring(0, 500);
            };

            // Get commit info from context
            const commitMessage = sanitizeInput(context.payload.head_commit?.message || '');
            const commitAuthor = sanitizeInput(context.payload.head_commit?.author?.name || '');
            const commitSha = context.sha;
            const commitDate = context.payload.head_commit?.timestamp || '';

            if (!commitMessage || !commitAuthor || !commitSha) {
              core.setFailed('Missing required commit information');
              return;
            }

            console.log(`Processing commit: ${commitMessage} by ${commitAuthor}`);

            // Check for existing PR
            const { data: prs } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              head: `${context.repo.owner}:feat/latest-changes-from-main`,
              base: 'feat/PEP-2386-dsp-v1-integration',
              state: 'open'
            });

            const existingPR = prs.length > 0 ? prs[0] : null;
            console.log(existingPR ? `Found existing PR #${existingPR.number}` : 'No existing PR found');

            // Create or update branch via API
            try {
              const { data: branch } = await github.rest.repos.getBranch({
                owner: context.repo.owner,
                repo: context.repo.repo,
                branch: 'feat/latest-changes-from-main'
              });
              
              console.log('Branch exists, updating...');
              await github.rest.git.updateRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: 'heads/feat/latest-changes-from-main',
                sha: context.sha
              });
              
            } catch (error) {
              if (error.status === 404) {
                console.log('Creating new branch...');
                await github.rest.git.createRef({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  ref: 'refs/heads/feat/latest-changes-from-main',
                  sha: context.sha
                });
              } else {
                core.setFailed(`Branch operation failed: ${error.message}`);
                return;
              }
            }

            // Set outputs for subsequent steps
            core.setOutput('commit-message', commitMessage);
            core.setOutput('commit-author', commitAuthor);
            core.setOutput('commit-sha', commitSha);
            core.setOutput('commit-date', commitDate);
            core.setOutput('pr-exists', existingPR ? 'true' : 'false');
            core.setOutput('pr-number', existingPR ? String(existingPR.number) : '');
            core.setOutput('pr-body', existingPR ? sanitizeInput(existingPR.body || '') : '');

      - name: Create new PR
        if: steps.setup.outputs.pr-exists == 'false'
        uses: actions/github-script@v7
        with:
          script: |
            const commitMessage = `${{ steps.setup.outputs.commit-message }}`;
            const commitAuthor = `${{ steps.setup.outputs.commit-author }}`;  
            const commitSha = `${{ steps.setup.outputs.commit-sha }}`;
            const commitDate = `${{ steps.setup.outputs.commit-date }}`;

            // Validate inputs
            if (!commitMessage || !commitAuthor || !commitSha) {
              core.setFailed('Invalid commit information for PR creation');
              return;
            }

            const body = `## ðŸ”„ Latest Changes from Main

            This PR contains the latest changes from the \`main\` branch that need to be integrated into \`feat/PEP-2386-dsp-v1-integration\`.

            ### Recent Commits:

            **${new Date(commitDate).toLocaleString()}** - ${commitMessage}  
            _by ${commitAuthor}_ (\`${commitSha.substring(0, 7)}\`)

            ---

            **Instructions:**
            1. Review the changes in this PR
            2. Test if needed  
            3. Approve and merge when ready
            4. This PR will be automatically recreated for future main branch changes

            _Auto-created by @${context.actor}_
            `;

            try {
              const { data: pr } = await github.rest.pulls.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: 'ðŸ”„ Sync latest changes from main',
                head: 'feat/latest-changes-from-main',
                base: 'feat/PEP-2386-dsp-v1-integration',
                body: body
              });
              
              console.log(`Created PR #${pr.number}`);
              
              // Add labels (optional - will fail silently if labels don't exist)
              try {
                await github.rest.issues.addLabels({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: pr.number,
                  labels: ['auto-sync', 'main-integration']
                });
              } catch (labelError) {
                console.log('Note: Could not add labels (they may not exist in the repo)');
              }
              
            } catch (error) {
              core.setFailed(`Failed to create PR: ${error.message}`);
            }

      - name: Update existing PR
        if: steps.setup.outputs.pr-exists == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const commitMessage = `${{ steps.setup.outputs.commit-message }}`;
            const commitAuthor = `${{ steps.setup.outputs.commit-author }}`;
            const commitSha = `${{ steps.setup.outputs.commit-sha }}`;
            const commitDate = `${{ steps.setup.outputs.commit-date }}`;
            const prNumber = parseInt(`${{ steps.setup.outputs.pr-number }}`, 10);
            const existingBody = `${{ steps.setup.outputs.pr-body }}`;

            // Validate inputs
            if (!commitMessage || !commitAuthor || !commitSha || !prNumber) {
              core.setFailed('Invalid data for PR update');
              return;
            }

            const newCommitEntry = `**${new Date(commitDate).toLocaleString()}** - ${commitMessage}  
            _by ${commitAuthor}_ (\`${commitSha.substring(0, 7)}\`)
            `;

            try {
              // Update PR body by inserting new commit after "### Recent Commits:" line
              const lines = existingBody.split('\n');
              const commitsIndex = lines.findIndex(line => line.includes('### Recent Commits:'));
              
              if (commitsIndex !== -1) {
                lines.splice(commitsIndex + 2, 0, newCommitEntry);
                const updatedBody = lines.join('\n');
                
                await github.rest.pulls.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: prNumber,
                  body: updatedBody
                });
                
                // Add comment about the new commit
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: prNumber,
                  body: `ðŸ”„ **New commit added from main by @${context.actor}:**\n\n${newCommitEntry}`
                });
                
                console.log(`Updated PR #${prNumber} with new commit`);
              } else {
                console.log('Could not find commit section in PR body, adding comment only');
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: prNumber,
                  body: `ðŸ”„ **New commit added from main by @${context.actor}:**\n\n${newCommitEntry}`
                });
              }
              
            } catch (error) {
              core.setFailed(`Failed to update PR: ${error.message}`);
            }

      - name: Summary
        uses: actions/github-script@v7
        with:
          script: |
            if ('${{ steps.setup.outputs.pr-exists }}' === 'true') {
              console.log(`âœ… Updated existing PR #${{ steps.setup.outputs.pr-number }} with new changes from main`);
            } else {
              console.log(`âœ… Created new PR to sync changes from main to feat/PEP-2386-dsp-v1-integration`);
            }
